-- CUSTOMERS table
CREATE TABLE CUSTOMERS (
    customer_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name      VARCHAR2(50) NOT NULL,
    last_name       VARCHAR2(50) NOT NULL,
    email           VARCHAR2(100) UNIQUE,
    phone           VARCHAR2(15),
    created_at      DATE DEFAULT SYSDATE
);

-- PRODUCTS table
CREATE TABLE PRODUCTS (
    product_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name    VARCHAR2(100) NOT NULL,
    category        VARCHAR2(50),
    price           NUMBER(10,2) NOT NULL,
    stock_quantity  NUMBER DEFAULT 0,
    supplier_id     NUMBER,
    CONSTRAINT fk_supplier FOREIGN KEY (supplier_id) REFERENCES SUPPLIERS(supplier_id)
);

-- SUPPLIERS table
CREATE TABLE SUPPLIERS (
    supplier_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    supplier_name   VARCHAR2(100) NOT NULL,
    contact_email   VARCHAR2(100),
    contact_phone   VARCHAR2(15)
);

-- ORDERS table
CREATE TABLE ORDERS (
    order_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id     NUMBER NOT NULL,
    order_date      DATE DEFAULT SYSDATE,
    status          VARCHAR2(20) DEFAULT 'PENDING',
    employee_id     NUMBER,
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id),
    CONSTRAINT fk_employee FOREIGN KEY (employee_id) REFERENCES EMPLOYEES(employee_id)
);

-- ORDER_ITEMS table
CREATE TABLE ORDER_ITEMS (
    order_item_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id        NUMBER NOT NULL,
    product_id      NUMBER NOT NULL,
    quantity        NUMBER NOT NULL,
    price_each      NUMBER(10,2) NOT NULL,
    CONSTRAINT fk_order FOREIGN KEY (order_id) REFERENCES ORDERS(order_id),
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id)
);

-- EMPLOYEES table
CREATE TABLE EMPLOYEES (
    employee_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name      VARCHAR2(50) NOT NULL,
    last_name       VARCHAR2(50) NOT NULL,
    role            VARCHAR2(50),
    hire_date       DATE DEFAULT SYSDATE
);

-- PAYMENTS table
CREATE TABLE PAYMENTS (
    payment_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id        NUMBER NOT NULL,
    payment_date    DATE DEFAULT SYSDATE,
    amount          NUMBER(10,2) NOT NULL,
    method          VARCHAR2(20) CHECK (method IN ('CASH','CARD','UPI','BANK')),
    CONSTRAINT fk_payment_order FOREIGN KEY (order_id) REFERENCES ORDERS(order_id)
);

-- SHIPMENTS table
CREATE TABLE SHIPMENTS (
    shipment_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id        NUMBER NOT NULL,
    shipped_date    DATE,
    delivery_date   DATE,
    status          VARCHAR2(20) DEFAULT 'IN_TRANSIT',
    CONSTRAINT fk_shipment_order FOREIGN KEY (order_id) REFERENCES ORDERS(order_id)
);

-- AUDIT_LOG table (for triggers later)
CREATE TABLE AUDIT_LOG (
    log_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name      VARCHAR2(50),
    operation       VARCHAR2(20),
    changed_at      DATE DEFAULT SYSDATE,
    details         VARCHAR2(4000)
);

--Insert Sample Data into Tables

INSERT INTO SUPPLIERS (supplier_name, contact_email, contact_phone) VALUES
('Tech Supplies Inc', 'contact@techsupplies.com', '9876543210'),
('Global Electronics', 'support@globalelec.com', '9123456780'),
('Smart Distributors', 'sales@smartdist.com', '9988776655');

INSERT INTO PRODUCTS (product_name, category, price, stock_quantity, supplier_id) VALUES
('Laptop Pro 15', 'Electronics', 75000, 50, 1),
('Wireless Mouse', 'Accessories', 1500, 200, 1),
('Smartphone X', 'Mobiles', 50000, 120, 2),
('Bluetooth Headset', 'Accessories', 3500, 75, 2),
('Office Chair', 'Furniture', 8000, 30, 3),
('Standing Desk', 'Furniture', 15000, 20, 3);

INSERT INTO CUSTOMERS (first_name, last_name, email, phone) VALUES
('Arjun', 'Mehta', 'arjun.mehta@example.com', '9001112233'),
('Sneha', 'Patel', 'sneha.patel@example.com', '9004445566'),
('Ravi', 'Kumar', 'ravi.kumar@example.com', '9007778899'),
('Fatima', 'Shaikh', 'fatima.shaikh@example.com', '9012223344'),
('David', 'Fernandes', 'david.fernandes@example.com', '9025556677');

INSERT INTO EMPLOYEES (first_name, last_name, role) VALUES
('Anita', 'Sharma', 'Sales Manager'),
('Rohan', 'Verma', 'Sales Executive'),
('Priya', 'Singh', 'Logistics Coordinator');

INSERT INTO ORDERS (customer_id, status, employee_id) VALUES
(1, 'CONFIRMED', 2),
(2, 'PENDING', 2),
(3, 'SHIPPED', 1),
(4, 'DELIVERED', 1),
(5, 'CONFIRMED', 3);

INSERT INTO ORDER_ITEMS (order_id, product_id, quantity, price_each) VALUES
(1, 1, 1, 75000),   -- Laptop
(1, 2, 2, 1500),    -- Mouse
(2, 3, 1, 50000),   -- Smartphone
(3, 4, 2, 3500),    -- Headset
(4, 5, 1, 8000),    -- Chair
(5, 6, 1, 15000);   -- Desk

INSERT INTO PAYMENTS (order_id, amount, method) VALUES
(1, 78000, 'CARD'),
(2, 50000, 'UPI'),
(3, 7000, 'CASH'),
(4, 8000, 'BANK'),
(5, 15000, 'CARD');

INSERT INTO SHIPMENTS (order_id, shipped_date, delivery_date, status) VALUES
(1, SYSDATE-3, SYSDATE-1, 'DELIVERED'),
(2, NULL, NULL, 'PENDING'),
(3, SYSDATE-5, SYSDATE-2, 'DELIVERED'),
(4, SYSDATE-7, SYSDATE-4, 'DELIVERED'),
(5, SYSDATE-2, NULL, 'IN_TRANSIT');

-- 1. Sales summary by product
CREATE OR REPLACE VIEW v_sales_summary AS
SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold,
    SUM(oi.quantity * oi.price_each) AS total_sales
FROM ORDER_ITEMS oi
JOIN PRODUCTS p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.product_name;

-- 2. Customer order history
CREATE OR REPLACE VIEW v_customer_orders AS
SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    o.order_id,
    o.order_date,
    o.status,
    SUM(oi.quantity * oi.price_each) AS order_total
FROM CUSTOMERS c
JOIN ORDERS o ON c.customer_id = o.customer_id
JOIN ORDER_ITEMS oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.first_name, c.last_name, o.order_id, o.order_date, o.status;

-- 3. Pending shipments
CREATE OR REPLACE VIEW v_pending_shipments AS
SELECT 
    o.order_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    s.status,
    s.shipped_date,
    s.delivery_date
FROM SHIPMENTS s
JOIN ORDERS o ON s.order_id = o.order_id
JOIN CUSTOMERS c ON o.customer_id = c.customer_id
WHERE s.status <> 'DELIVERED';

--Monthly Revenue Summary

CREATE OR REPLACE VIEW v_monthly_revenue AS
SELECT 
    TO_CHAR(p.payment_date, 'YYYY-MM') AS month,
    SUM(p.amount) AS total_revenue,
    COUNT(p.payment_id) AS total_payments
FROM PAYMENTS p
GROUP BY TO_CHAR(p.payment_date, 'YYYY-MM')
ORDER BY month;

--Top 5 Customers by Spending

CREATE OR REPLACE VIEW v_top_customers AS
SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    SUM(p.amount) AS total_spent
FROM CUSTOMERS c
JOIN ORDERS o ON c.customer_id = o.customer_id
JOIN PAYMENTS p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
FETCH FIRST 5 ROWS ONLY ;

--Employee Performance (Total Orders Handled)

CREATE OR REPLACE VIEW v_employee_performance AS
SELECT 
    e.employee_id,
    e.first_name || ' ' || e.last_name AS employee_name,
    COUNT(o.order_id) AS total_orders,
    SUM(oi.quantity * oi.price_each) AS total_sales
FROM EMPLOYEES e
LEFT JOIN ORDERS o ON e.employee_id = o.employee_id
LEFT JOIN ORDER_ITEMS oi ON o.order_id = oi.order_id
GROUP BY e.employee_id, e.first_name, e.last_name
ORDER BY total_sales DESC;

--Low Stock Products

CREATE OR REPLACE VIEW v_low_stock AS
SELECT 
    p.product_id,
    p.product_name,
    p.stock_quantity,
    s.supplier_name
FROM PRODUCTS p
JOIN SUPPLIERS s ON p.supplier_id = s.supplier_id
WHERE p.stock_quantity < 20
ORDER BY p.stock_quantity ASC;

--Triggers
--Audit logging trigger
CREATE OR REPLACE TRIGGER trg_audit_log
AFTER INSERT OR UPDATE OR DELETE ON ORDERS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDIT_LOG(table_name, operation, details)
        VALUES ('ORDERS', 'INSERT',
                'New Order ID: ' || :NEW.order_id || ', Status: ' || :NEW.status);
    ELSIF UPDATING THEN
        INSERT INTO AUDIT_LOG(table_name, operation, details)
        VALUES ('ORDERS', 'UPDATE',
                'Order ID: ' || :OLD.order_id || 
                ', Old Status: ' || :OLD.status || 
                ', New Status: ' || :NEW.status);
    ELSIF DELETING THEN
        INSERT INTO AUDIT_LOG(table_name, operation, details)
        VALUES ('ORDERS', 'DELETE',
                'Deleted Order ID: ' || :OLD.order_id || ', Status: ' || :OLD.status);
    END IF;
END;
/

--Stock Update Trigger
CREATE OR REPLACE TRIGGER trg_update_stock
AFTER INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTS
    SET stock_quantity = stock_quantity - :NEW.quantity
    WHERE product_id = :NEW.product_id;
END;
/
--Stored Procedure: Place Order
CREATE OR REPLACE PROCEDURE sp_place_order (
    p_customer_id   IN NUMBER,
    p_employee_id   IN NUMBER,
    p_product_id    IN NUMBER,
    p_quantity      IN NUMBER,
    p_payment_method IN VARCHAR2
) AS
    v_order_id   NUMBER;
    v_price_each NUMBER(10,2);
    v_total      NUMBER(10,2);
BEGIN
    -- Get product price
    SELECT price INTO v_price_each
    FROM PRODUCTS
    WHERE product_id = p_product_id;

    -- Calculate total
    v_total := v_price_each * p_quantity;

    -- 1. Insert into ORDERS
    INSERT INTO ORDERS (customer_id, status, employee_id)
    VALUES (p_customer_id, 'CONFIRMED', p_employee_id)
    RETURNING order_id INTO v_order_id;

    -- 2. Insert into ORDER_ITEMS
    INSERT INTO ORDER_ITEMS (order_id, product_id, quantity, price_each)
    VALUES (v_order_id, p_product_id, p_quantity, v_price_each);

    -- 3. Insert into PAYMENTS
    INSERT INTO PAYMENTS (order_id, amount, method)
    VALUES (v_order_id, v_total, p_payment_method);

    DBMS_OUTPUT.PUT_LINE('Order placed successfully. Order ID: ' || v_order_id);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error placing order: ' || SQLERRM);
        ROLLBACK;
END;
/
BEGIN
    sp_place_order(1, 2, 3, 2, 'CARD');  
END;
/

--Function: Customer Total Spent
CREATE OR REPLACE FUNCTION fn_customer_total_spent (
    p_customer_id IN NUMBER
) RETURN NUMBER IS
    v_total NUMBER(12,2);
BEGIN
    SELECT NVL(SUM(p.amount),0)
    INTO v_total
    FROM ORDERS o
    JOIN PAYMENTS p ON o.order_id = p.order_id
    WHERE o.customer_id = p_customer_id;

    RETURN v_total;
END;
/
SELECT fn_customer_total_spent(1) AS total_spent FROM dual;

--Function: Product Stock Check
CREATE OR REPLACE FUNCTION fn_check_stock (
    p_product_id IN NUMBER,
    p_quantity   IN NUMBER
) RETURN VARCHAR2 IS
    v_stock NUMBER;
BEGIN
    SELECT stock_quantity INTO v_stock
    FROM PRODUCTS
    WHERE product_id = p_product_id;

    IF v_stock >= p_quantity THEN
        RETURN 'Available';
    ELSE
        RETURN 'Insufficient Stock';
    END IF;
END;
/
SELECT fn_check_stock(1, 5) FROM dual;

--Analytics & Reporting (SQL queries)
--Total sales by month / year
-- Total sales by month (YYYY-MM)
SELECT TO_CHAR(payment_date, 'YYYY-MM') AS month,
       SUM(amount) AS total_sales,
       COUNT(payment_id) AS payments_count
FROM PAYMENTS
GROUP BY TO_CHAR(payment_date, 'YYYY-MM')
ORDER BY month;

-- Total sales by year
SELECT EXTRACT(YEAR FROM payment_date) AS sales_year,
       SUM(amount) AS total_sales
FROM PAYMENTS
GROUP BY EXTRACT(YEAR FROM payment_date)
ORDER BY sales_year;

--Top 5 customers by revenue
SELECT c.customer_id,
       c.first_name || ' ' || c.last_name AS customer_name,
       NVL(SUM(p.amount),0) AS total_spent
FROM CUSTOMERS c
LEFT JOIN ORDERS o ON c.customer_id = o.customer_id
LEFT JOIN PAYMENTS p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
FETCH FIRST 5 ROWS ONLY;

--Products with low stock
SELECT product_id, product_name, stock_quantity
FROM PRODUCTS
WHERE stock_quantity <= 10    -- threshold adjustable
ORDER BY stock_quantity ASC;

--Employee performance (sales handled)
-- Using order_items to calculate sales value handled by employee
SELECT e.employee_id,
       e.first_name || ' ' || e.last_name AS employee_name,
       COUNT(DISTINCT o.order_id) AS orders_handled,
       NVL(SUM(oi.quantity * oi.price_each),0) AS revenue_handled
FROM EMPLOYEES e
LEFT JOIN ORDERS o ON e.employee_id = o.employee_id
LEFT JOIN ORDER_ITEMS oi ON o.order_id = oi.order_id
GROUP BY e.employee_id, e.first_name, e.last_name
ORDER BY revenue_handled DESC;

--Payment delays report
-- Delays where payment exists but was late ( > 7 days after order )
SELECT o.order_id,
       o.order_date,
       p.payment_date,
       p.amount,
       ROUND(p.payment_date - o.order_date) AS days_to_pay
FROM ORDERS o
JOIN PAYMENTS p ON o.order_id = p.order_id
WHERE p.payment_date > o.order_date + 7
ORDER BY days_to_pay DESC;

-- Orders with no payment after 14 days
SELECT o.order_id, o.order_date, ROUND(SYSDATE - o.order_date) AS days_since_order
FROM ORDERS o
LEFT JOIN PAYMENTS p ON o.order_id = p.order_id
WHERE p.payment_id IS NULL
  AND SYSDATE - o.order_date > 14
ORDER BY days_since_order DESC;

--ETL Simulation (Staging → Production)
-- Raw sales staging (represents a single row per sale in CSV)
CREATE TABLE STG_SALES_RAW (
    stg_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    raw_order_id  VARCHAR2(100),    -- maybe external id
    customer_email VARCHAR2(100),
    product_name   VARCHAR2(200),
    qty            NUMBER,
    unit_price     NUMBER(10,2),
    payment_method VARCHAR2(20),
    order_date     VARCHAR2(50),    -- raw string (simulate messy CSV)
    shipped_date   VARCHAR2(50),
    raw_notes      VARCHAR2(1000),
    loaded_at      DATE DEFAULT SYSDATE
);

-- Staging for normalized rows (cleaned)
CREATE TABLE STG_SALES_CLEAN (
    stg_id        NUMBER PRIMARY KEY,
    customer_id   NUMBER,
    product_id    NUMBER,
    qty           NUMBER,
    price_each    NUMBER(10,2),
    payment_method VARCHAR2(20),
    order_date    DATE,
    shipped_date  DATE
);
INSERT INTO STG_SALES_RAW (raw_order_id, customer_email, product_name, qty, unit_price, payment_method, order_date, shipped_date, raw_notes)
VALUES ('X-1001', 'arjun.mehta@example.com', 'Laptop Pro 15', 1, 75000, 'CARD', '2025-09-01', '2025-09-03', 'promo: none');

-- add multiple as needed or bulk-load using SQL Developer CSV import to STG_SALES_RAW

--Transform: clean and lookup ids (PL/SQL block)
DECLARE
  CURSOR c_raw IS SELECT stg_id, customer_email, product_name, qty, unit_price, payment_method, order_date, shipped_date FROM STG_SALES_RAW;
  v_customer_id CUSTOMERS.customer_id%TYPE;
  v_product_id  PRODUCTS.product_id%TYPE;
  v_order_date  DATE;
  v_ship_date   DATE;
BEGIN
  FOR r IN c_raw LOOP
    -- lookup customer
    SELECT customer_id INTO v_customer_id
    FROM CUSTOMERS
    WHERE email = r.customer_email;

    -- lookup product (simple match by name)
    SELECT product_id INTO v_product_id
    FROM PRODUCTS
    WHERE product_name = r.product_name;

    -- parse dates (attempt)
    BEGIN
      v_order_date := TO_DATE(r.order_date,'YYYY-MM-DD');
    EXCEPTION
      WHEN OTHERS THEN
        v_order_date := SYSDATE;
    END;

    BEGIN
      v_ship_date := TO_DATE(r.shipped_date,'YYYY-MM-DD');
    EXCEPTION
      WHEN OTHERS THEN
        v_ship_date := NULL;
    END;

    INSERT INTO STG_SALES_CLEAN (stg_id, customer_id, product_id, qty, price_each, payment_method, order_date, shipped_date)
    VALUES (r.stg_id, v_customer_id, v_product_id, r.qty, r.unit_price, r.payment_method, v_order_date, v_ship_date);
  END LOOP;

  COMMIT;
END;
/
--Load into production (MERGE / INSERTs) — basic approach
-- For each cleaned staging row create an order + order_item + payment + shipment
DECLARE
  CURSOR c IS SELECT * FROM STG_SALES_CLEAN;
  v_order_id NUMBER;
BEGIN
  FOR r IN c LOOP
    -- Insert order
    INSERT INTO ORDERS (customer_id, status, employee_id, order_date)
    VALUES (r.customer_id, 'CONFIRMED', NULL, r.order_date)
    RETURNING order_id INTO v_order_id;

    -- Insert item
    INSERT INTO ORDER_ITEMS (order_id, product_id, quantity, price_each)
    VALUES (v_order_id, r.product_id, r.qty, r.price_each);

    -- Insert payment
    INSERT INTO PAYMENTS (order_id, amount, method, payment_date)
    VALUES (v_order_id, r.qty * r.price_each, r.payment_method, r.order_date + 1);

    -- Insert shipment (if shipped_date present)
    INSERT INTO SHIPMENTS (order_id, shipped_date, delivery_date, status)
    VALUES (v_order_id, r.shipped_date, NULL, CASE WHEN r.shipped_date IS NULL THEN 'PENDING' ELSE 'IN_TRANSIT' END);
  END LOOP;
  COMMIT;
END;
/

-- Optionally move processed staging rows to an archive or mark as processed:
UPDATE STG_SALES_RAW sr SET raw_notes = 'PROCESSED' WHERE sr.stg_id IN (SELECT stg_id FROM STG_SALES_CLEAN);
COMMIT;

--Security & Optimization
--Create roles & users (ANALYST, MANAGER) with GRANT/REVOKE
-- Create roles
CREATE ROLE analyst_role;
CREATE ROLE manager_role;

-- Create users (example)
CREATE USER analyst IDENTIFIED BY analyst_pwd
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP;
CREATE USER manager IDENTIFIED BY manager_pwd
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP;

-- Grant connect privileges
GRANT CREATE SESSION TO analyst, manager;

-- Grant read-only to analyst
GRANT SELECT ON CUSTOMERS TO analyst;
GRANT SELECT ON PRODUCTS TO analyst;
GRANT SELECT ON ORDERS TO analyst;
GRANT SELECT ON ORDER_ITEMS TO analyst;
GRANT SELECT ON PAYMENTS TO analyst;
GRANT SELECT ON SHIPMENTS TO analyst;
GRANT SELECT ON EMPLOYEES TO analyst;

-- Grant manager more rights (read/write)
GRANT SELECT, INSERT, UPDATE, DELETE ON CUSTOMERS TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDERS TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDER_ITEMS TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTS TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON PAYMENTS TO manager;
GRANT SELECT, INSERT, UPDATE, DELETE ON SHIPMENTS TO manager;

-- Assign roles to users
GRANT analyst_role TO analyst;
GRANT manager_role TO manager;

--Add indexes on high-usage columns

-- Indexes to speed up joins & filters
CREATE INDEX idx_orders_customer ON ORDERS (customer_id);
CREATE INDEX idx_orders_employee ON ORDERS (employee_id);
CREATE INDEX idx_orderitems_order ON ORDER_ITEMS (order_id);
CREATE INDEX idx_orderitems_product ON ORDER_ITEMS (product_id);
CREATE INDEX idx_payments_order ON PAYMENTS (order_id);
CREATE INDEX idx_products_supplier ON PRODUCTS (supplier_id);
CREATE INDEX idx_payments_date ON PAYMENTS (payment_date);


