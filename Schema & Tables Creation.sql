-- CUSTOMERS table
CREATE TABLE CUSTOMERS (
    customer_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name      VARCHAR2(50) NOT NULL,
    last_name       VARCHAR2(50) NOT NULL,
    email           VARCHAR2(100) UNIQUE,
    phone           VARCHAR2(15),
    created_at      DATE DEFAULT SYSDATE
);

-- PRODUCTS table
CREATE TABLE PRODUCTS (
    product_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_name    VARCHAR2(100) NOT NULL,
    category        VARCHAR2(50),
    price           NUMBER(10,2) NOT NULL,
    stock_quantity  NUMBER DEFAULT 0,
    supplier_id     NUMBER,
    CONSTRAINT fk_supplier FOREIGN KEY (supplier_id) REFERENCES SUPPLIERS(supplier_id)
);

-- SUPPLIERS table
CREATE TABLE SUPPLIERS (
    supplier_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    supplier_name   VARCHAR2(100) NOT NULL,
    contact_email   VARCHAR2(100),
    contact_phone   VARCHAR2(15)
);

-- ORDERS table
CREATE TABLE ORDERS (
    order_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id     NUMBER NOT NULL,
    order_date      DATE DEFAULT SYSDATE,
    status          VARCHAR2(20) DEFAULT 'PENDING',
    employee_id     NUMBER,
    CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id),
    CONSTRAINT fk_employee FOREIGN KEY (employee_id) REFERENCES EMPLOYEES(employee_id)
);

-- ORDER_ITEMS table
CREATE TABLE ORDER_ITEMS (
    order_item_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id        NUMBER NOT NULL,
    product_id      NUMBER NOT NULL,
    quantity        NUMBER NOT NULL,
    price_each      NUMBER(10,2) NOT NULL,
    CONSTRAINT fk_order FOREIGN KEY (order_id) REFERENCES ORDERS(order_id),
    CONSTRAINT fk_product FOREIGN KEY (product_id) REFERENCES PRODUCTS(product_id)
);

-- EMPLOYEES table
CREATE TABLE EMPLOYEES (
    employee_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name      VARCHAR2(50) NOT NULL,
    last_name       VARCHAR2(50) NOT NULL,
    role            VARCHAR2(50),
    hire_date       DATE DEFAULT SYSDATE
);

-- PAYMENTS table
CREATE TABLE PAYMENTS (
    payment_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id        NUMBER NOT NULL,
    payment_date    DATE DEFAULT SYSDATE,
    amount          NUMBER(10,2) NOT NULL,
    method          VARCHAR2(20) CHECK (method IN ('CASH','CARD','UPI','BANK')),
    CONSTRAINT fk_payment_order FOREIGN KEY (order_id) REFERENCES ORDERS(order_id)
);

-- SHIPMENTS table
CREATE TABLE SHIPMENTS (
    shipment_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id        NUMBER NOT NULL,
    shipped_date    DATE,
    delivery_date   DATE,
    status          VARCHAR2(20) DEFAULT 'IN_TRANSIT',
    CONSTRAINT fk_shipment_order FOREIGN KEY (order_id) REFERENCES ORDERS(order_id)
);

-- AUDIT_LOG table (for triggers later)
CREATE TABLE AUDIT_LOG (
    log_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name      VARCHAR2(50),
    operation       VARCHAR2(20),
    changed_at      DATE DEFAULT SYSDATE,
    details         VARCHAR2(4000)
);

--Insert Sample Data into Tables

INSERT INTO SUPPLIERS (supplier_name, contact_email, contact_phone) VALUES
('Tech Supplies Inc', 'contact@techsupplies.com', '9876543210'),
('Global Electronics', 'support@globalelec.com', '9123456780'),
('Smart Distributors', 'sales@smartdist.com', '9988776655');

INSERT INTO PRODUCTS (product_name, category, price, stock_quantity, supplier_id) VALUES
('Laptop Pro 15', 'Electronics', 75000, 50, 1),
('Wireless Mouse', 'Accessories', 1500, 200, 1),
('Smartphone X', 'Mobiles', 50000, 120, 2),
('Bluetooth Headset', 'Accessories', 3500, 75, 2),
('Office Chair', 'Furniture', 8000, 30, 3),
('Standing Desk', 'Furniture', 15000, 20, 3);

INSERT INTO CUSTOMERS (first_name, last_name, email, phone) VALUES
('Arjun', 'Mehta', 'arjun.mehta@example.com', '9001112233'),
('Sneha', 'Patel', 'sneha.patel@example.com', '9004445566'),
('Ravi', 'Kumar', 'ravi.kumar@example.com', '9007778899'),
('Fatima', 'Shaikh', 'fatima.shaikh@example.com', '9012223344'),
('David', 'Fernandes', 'david.fernandes@example.com', '9025556677');

INSERT INTO EMPLOYEES (first_name, last_name, role) VALUES
('Anita', 'Sharma', 'Sales Manager'),
('Rohan', 'Verma', 'Sales Executive'),
('Priya', 'Singh', 'Logistics Coordinator');

INSERT INTO ORDERS (customer_id, status, employee_id) VALUES
(1, 'CONFIRMED', 2),
(2, 'PENDING', 2),
(3, 'SHIPPED', 1),
(4, 'DELIVERED', 1),
(5, 'CONFIRMED', 3);

INSERT INTO ORDER_ITEMS (order_id, product_id, quantity, price_each) VALUES
(1, 1, 1, 75000),   -- Laptop
(1, 2, 2, 1500),    -- Mouse
(2, 3, 1, 50000),   -- Smartphone
(3, 4, 2, 3500),    -- Headset
(4, 5, 1, 8000),    -- Chair
(5, 6, 1, 15000);   -- Desk

INSERT INTO PAYMENTS (order_id, amount, method) VALUES
(1, 78000, 'CARD'),
(2, 50000, 'UPI'),
(3, 7000, 'CASH'),
(4, 8000, 'BANK'),
(5, 15000, 'CARD');

INSERT INTO SHIPMENTS (order_id, shipped_date, delivery_date, status) VALUES
(1, SYSDATE-3, SYSDATE-1, 'DELIVERED'),
(2, NULL, NULL, 'PENDING'),
(3, SYSDATE-5, SYSDATE-2, 'DELIVERED'),
(4, SYSDATE-7, SYSDATE-4, 'DELIVERED'),
(5, SYSDATE-2, NULL, 'IN_TRANSIT');

-- 1. Sales summary by product
CREATE OR REPLACE VIEW v_sales_summary AS
SELECT 
    p.product_id,
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold,
    SUM(oi.quantity * oi.price_each) AS total_sales
FROM ORDER_ITEMS oi
JOIN PRODUCTS p ON oi.product_id = p.product_id
GROUP BY p.product_id, p.product_name;

-- 2. Customer order history
CREATE OR REPLACE VIEW v_customer_orders AS
SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    o.order_id,
    o.order_date,
    o.status,
    SUM(oi.quantity * oi.price_each) AS order_total
FROM CUSTOMERS c
JOIN ORDERS o ON c.customer_id = o.customer_id
JOIN ORDER_ITEMS oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.first_name, c.last_name, o.order_id, o.order_date, o.status;

-- 3. Pending shipments
CREATE OR REPLACE VIEW v_pending_shipments AS
SELECT 
    o.order_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    s.status,
    s.shipped_date,
    s.delivery_date
FROM SHIPMENTS s
JOIN ORDERS o ON s.order_id = o.order_id
JOIN CUSTOMERS c ON o.customer_id = c.customer_id
WHERE s.status <> 'DELIVERED';

--Monthly Revenue Summary

CREATE OR REPLACE VIEW v_monthly_revenue AS
SELECT 
    TO_CHAR(p.payment_date, 'YYYY-MM') AS month,
    SUM(p.amount) AS total_revenue,
    COUNT(p.payment_id) AS total_payments
FROM PAYMENTS p
GROUP BY TO_CHAR(p.payment_date, 'YYYY-MM')
ORDER BY month;

--Top 5 Customers by Spending

CREATE OR REPLACE VIEW v_top_customers AS
SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    SUM(p.amount) AS total_spent
FROM CUSTOMERS c
JOIN ORDERS o ON c.customer_id = o.customer_id
JOIN PAYMENTS p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
FETCH FIRST 5 ROWS ONLY ;

--Employee Performance (Total Orders Handled)

CREATE OR REPLACE VIEW v_employee_performance AS
SELECT 
    e.employee_id,
    e.first_name || ' ' || e.last_name AS employee_name,
    COUNT(o.order_id) AS total_orders,
    SUM(oi.quantity * oi.price_each) AS total_sales
FROM EMPLOYEES e
LEFT JOIN ORDERS o ON e.employee_id = o.employee_id
LEFT JOIN ORDER_ITEMS oi ON o.order_id = oi.order_id
GROUP BY e.employee_id, e.first_name, e.last_name
ORDER BY total_sales DESC;

--Low Stock Products

CREATE OR REPLACE VIEW v_low_stock AS
SELECT 
    p.product_id,
    p.product_name,
    p.stock_quantity,
    s.supplier_name
FROM PRODUCTS p
JOIN SUPPLIERS s ON p.supplier_id = s.supplier_id
WHERE p.stock_quantity < 20
ORDER BY p.stock_quantity ASC;

--Triggers
--Audit logging trigger
CREATE OR REPLACE TRIGGER trg_audit_log
AFTER INSERT OR UPDATE OR DELETE ON ORDERS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO AUDIT_LOG(table_name, operation, details)
        VALUES ('ORDERS', 'INSERT',
                'New Order ID: ' || :NEW.order_id || ', Status: ' || :NEW.status);
    ELSIF UPDATING THEN
        INSERT INTO AUDIT_LOG(table_name, operation, details)
        VALUES ('ORDERS', 'UPDATE',
                'Order ID: ' || :OLD.order_id || 
                ', Old Status: ' || :OLD.status || 
                ', New Status: ' || :NEW.status);
    ELSIF DELETING THEN
        INSERT INTO AUDIT_LOG(table_name, operation, details)
        VALUES ('ORDERS', 'DELETE',
                'Deleted Order ID: ' || :OLD.order_id || ', Status: ' || :OLD.status);
    END IF;
END;
/

--Stock Update Trigger
CREATE OR REPLACE TRIGGER trg_update_stock
AFTER INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTS
    SET stock_quantity = stock_quantity - :NEW.quantity
    WHERE product_id = :NEW.product_id;
END;
/
